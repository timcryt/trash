"Simple unoptimized brainfuck interpreter"

$set and {@if $1 [@if $2 true else false] else false}
$set or {@if $1 true else [@if $2 true else false]}
$set not {@if $1 false else true}

"Brainfuck code inputting"
$set (stdin code) [@while (true $stdin ()) {$1} {
    $set (stdin code) ($1 $2)
    $set (stdin char) [[$stdin read] with 1 {@asc $1}]
    $set f [@or [@char eq "-1"] [@char eq 33]]
    $set code [@if @f <{$code} code> else <{$code push [@char chr]} code>]
    ([@not $f] $stdin $code)
}]

$set (code len) [[$code push " "] _len]
$set (_ data _ _  code _) [@while ([@int 0] $code () "" [@int 0] () [@int 0]) {$1 lt @len} {
    $set (old data inst count code i) ($1 $2 $3 $4 $5 $6)
    $set (old new_inst) [$old without @i {(@1 $1)}]
    @if {@and [@and [@inst eq "["] [@new_inst eq "-"]] [[@i add 1] lt @len]} <{
        $set (old next2_inst) [$old without [@i add 1] {(@1 $1)}]
        @if {@next2_inst eq "]"} <{
            ([@i add 2] $old $data "" "" [$code with "-1" {"N"}] [$i add 2])
        } old data inst count code i> else <{
            (@i $old $data "" "" $code $i)
        } old data inst count code i>
    } old data inst count code i> else <{
        @if {@or [@inst eq ">"] [@or [@inst eq "<"] [@or [@inst eq "+"] [@inst eq "-"]]]} <{
            @if {@new_inst eq @inst} <{
                ([@i add 1] $old $data $inst [$count add 1] $code [$i add 1])
            } old data inst count code i> else <{
                $set (count inst) [
                    @if {@or [@inst eq "<"] [@inst eq "-"]} {
                        ([[@int 0] sub @count] [@if {@inst eq "<"} ">" else "+"])
                    } else {
                        (@count @inst)
                    }
                ]
                (@i $old [$data push @count] @new_inst [@int 0] [$code push $inst] $i)
            } old data inst count code i>
        } old data inst count code i> else <{
            @if {@or [@new_inst eq ">"] [@or [@new_inst eq "<"] [@or [@new_inst eq "+"] [@new_inst eq "-"]]]} <{
                (@i $old $data @new_inst [@int 0] $code $i)
            } old data inst count code i> else <{
                ([@i add 1] $old [$data push 0] @new_inst "" [$code push @new_inst] [$i add 1])
            } old data inst count code i>
        } old data inst count code i>
    } old data inst count code i>
}]

$set (code len) [$code _len]
$set (code data _) [@while ([@int 0] $code $data [@int 0]) {$1 lt @len} {
    $set (code data i) ($1 $2 $3)
    $set (code inst) [@code without @i {(@1 $1)}]
    @if {@inst eq "["} <{
        $set (code j) [<{
            $set d [@int 1]
            $set (d i code) [
                @while (@d @d @i $code) {$1 gt 0} {
                    $set (d i code) ($1 $2 $3)  
                    $set i [$i add 1]
                    
                    $set (code inst) [$code without @i {(@1 $1)}]

                    $set d [
                        @if {@inst eq "["} {
                            @d add 1
                        } else {
                            @if {@inst eq "]"} {
                                @d sub 1
                            } else {
                                @d
                            }
                        }
                    ]
                    (@d @d @i $code)
                }
            ]
            ($code $i)
        } code>]
        $set data [$data with @i {@j}]
        $set data [$data with @j {@i}]
        ([@i add 1] $code $data [@i add 1])
    } code data> else <{
        ([@i add 1] $code $data [@i add 1])
    } code data>
}]

"Memory size"
$set n [@int 30000]
$set mem [[@while ([@int 0] [@int 0] ()) {$1 lt @n} {
    ([@1 add 1] [@1 add 1] [$2 push [@int 0]])
}] 1]
$set (i j (code l)) ([@int 0] [@int 0] [$code _len])
@while (@i @i @j $code $data $mem $stdin $stdout) {$1 lt @l} {
    $set (i j code data mem stdin stdout) ($1 $2 $3 $4 $5 $6 $7)
    
    $set (code inst) [$code without @i {(@1 $1)}]
    $set (data count) [$data without @i {(@1 $1)}]
    $set (mem f) [$mem without @j {(@1 $1)}] 

    [[@if {@inst eq ">"} <{
        (@i @i [@j add @count] $code $data $mem $stdin $stdout)
    } code data mem stdin stdout> else <{
        @if {@inst eq "+"} <{
            $set mem [$mem with @j {
                $set r [[$1 add @count] sub 256]
                @if {@r lt 0} <{$r add 256} r> else <{$r} r>
            }]
            (@i @i @j $code $data $mem $stdin $stdout)
        } code data mem stdin stdout> else <{
            @if {@inst eq "N"} <{
                (@i @i @j $code $data [$mem with @j {[@int 0]}] $stdin $stdout)
            } code data mem stdin stdout> else <{
                @if {@or [@and [@inst eq "["] [@f eq 0]] [@and [@inst eq "]"] [@f gt 0]]} <{
                    (@count @count @j $code $data $mem $stdin $stdout)
                } code data mem stdin stdout> else <{
                    @if {@inst eq "."} <{
                        (@i @i @j $code $data $mem $stdin [$stdout [@f chr]])
                    } code data mem stdin stdout> else <{
                        @if {@inst eq ","} <{
                            $set (stdin x) [[$stdin read] with 1 {@asc $1}]
                            (@i @i @j $code $data [$mem with @j <{$x} x>] $stdin $stdout)
                        } code data mem stdin stdout> else <{
                            (@i @i @j $code $data $mem $stdin $stdout)
                        } code data mem stdin stdout>
                    } code data mem stdin stdout>
                } code data mem stdin stdout>
            } code data mem stdin stdout>
        } code data mem stdin stdout>
    } code data mem stdin stdout>] with 1 {$1 add 1}] with 0 {$1 add 1}
}

""